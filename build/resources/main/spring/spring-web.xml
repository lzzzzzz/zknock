<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <!-- 4.扫描web相关的bean -->
    <context:component-scan base-package="com.lz.zknock.controller" >
        <context:include-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.RestController" />
    </context:component-scan>

    <!-- websocket相关扫描，主要扫描：WebSocketConfig.java 这个类路径 -->
    <context:component-scan base-package="com.lz.zknock.websocket"/>


    <mvc:view-controller path="/" view-name="forward:/index.jsp" />

    <!-- 这个bean要放在context:component-scan这个前面，不然会出现中文乱码 -->

    <!-- 配置SpringMVC -->
    <!-- 1.开启SpringMVC注解模式 -->
    <!-- 简化配置：
        (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter
        (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持
    -->
    <mvc:annotation-driven />

    <!-- 2.静态资源默认servlet配置
        (1)加入对静态资源的处理：js,gif,png
        (2)允许使用"/"做整体映射
     -->
    <mvc:default-servlet-handler/>

    <!-- 3.配置jsp 显示ViewResolver -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list >
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>
    <!--配置默认返回json数据-->
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!--
        &lt;!&ndash; 5.生成文档 &ndash;&gt;
        <bean class="org.openmore.document.MySwaggerConfig"/>-->

    <!-- 6.拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 先匹配所有路径，然后排除不需要检查的路径 -->
            <mvc:mapping path="/user/*" />
            <bean class="com.lz.zknock.interceptor.SecurityInterceptor" />
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 静态资源映射 -->
    <!--<mvc:resources mapping="/images/**" location="/WEB-INF/images/" />-->
    <mvc:resources mapping="/css/**" location="/WEB-INF/css/" />
    <mvc:resources mapping="/js/**" location="/WEB-INF/js/" />
    <mvc:resources mapping="/fonts/**" location="/WEB-INF/fonts/" />
    <mvc:resources mapping="/images/**" location="/WEB-INF/images/" />
    <!--<mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/>-->
    <!--<mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>-->

    <!--<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
        <!--<property name="prefix" value="/WEB-INF/views/"/>-->
        <!--<property name="suffix" value=".jsp"/>-->
    <!--</bean>-->

    <!-- 引入同文件夹下的redis属性配置文件 -->
    <import resource="classpath:redis/redis-context.xml"/>
</beans>